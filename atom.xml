<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JimWave的博客</title>
  
  <subtitle>enjoy it</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.baidu.com/"/>
  <updated>2018-03-24T12:55:57.000Z</updated>
  <id>www.baidu.com/</id>
  
  <author>
    <name>JimWave</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fresco</title>
    <link href="www.baidu.com/2018/03/24/fresco/"/>
    <id>www.baidu.com/2018/03/24/fresco/</id>
    <published>2018-03-24T12:55:57.000Z</published>
    <updated>2018-03-24T12:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="Drawees"><a href="#Drawees" class="headerlink" title="Drawees"></a>Drawees</h2><ul><li>DraweeView，View层，默认实现类 SimpleDraweeView </li><li>DraweeHierarchy Model层，持有Drawable等，Drawable是AndroidFramework抽象出来的可画对象的意思，默认实现类GenericDraweeHierarchy</li><li>DraweeController 负责处理交互并展现到DrweeView，默认实现类PipelineDraweeController</li><li>DraweeControllerBuilder 建造者模式，DraweeController有太多可配置参数<br><strong>Drawees 负责图片的呈现。它由三个元素组成，有点像MVC模式。</strong></li></ul><h2 id="ImagePipeLine"><a href="#ImagePipeLine" class="headerlink" title="ImagePipeLine"></a>ImagePipeLine</h2><ul><li>Bitmap处理方式的抽象，各种缓存策略等等。</li><li>ImagePipeline就是一个加载图片的组件，如果有可能，甚至可以拿出来让其他图片加载框架用。比如Volley的图片加载组件。</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>官方用法，</p><pre><code>Uri uri = Uri.parse(&quot;https://raw.githubusercontent.com/facebook/fresco/gh-pages/static/logo.png&quot;);SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);draweeView.setImageURI(uri);</code></pre><p>其实最后都是一个套路给View一个Controller，想当于View层换了一个Pontroller</p><pre><code>public void setImageURI(Uri uri, @Nullable Object callerContext) {    DraweeController controller = mSimpleDraweeControllerBuilder        .setCallerContext(callerContext)        .setUri(uri)        .setOldController(getController())        .build();    setController(controller);}    </code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/desmond1121/Fresco-Source-Analysis" target="_blank" rel="noopener">源码解析</a></li><li><a href="https://github.com/liaohuqiu/fresco-demo-for-gradle" target="_blank" rel="noopener">FrescoDemo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h1&gt;&lt;h2 id=&quot;Drawees&quot;&gt;&lt;a href=&quot;#Drawees&quot; class=&quot;headerlink&quot; title=&quot;Dra
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="www.baidu.com/2018/01/02/HelloWorld/"/>
    <id>www.baidu.com/2018/01/02/HelloWorld/</id>
    <published>2018-01-01T16:24:26.000Z</published>
    <updated>2018-03-24T12:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天是新年的第二天"><a href="#今天是新年的第二天" class="headerlink" title="今天是新年的第二天"></a>今天是新年的第二天</h2><p>Fuck aijalsjflaslj</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今天是新年的第二天&quot;&gt;&lt;a href=&quot;#今天是新年的第二天&quot; class=&quot;headerlink&quot; title=&quot;今天是新年的第二天&quot;&gt;&lt;/a&gt;今天是新年的第二天&lt;/h2&gt;&lt;p&gt;Fuck aijalsjflaslj&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
