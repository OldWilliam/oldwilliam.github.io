<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OldWilliam</title>
  
  <subtitle>Keep Going</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.baidu.com/"/>
  <updated>2019-07-04T12:51:50.163Z</updated>
  <id>www.baidu.com/</id>
  
  <author>
    <name>OldWilliam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fresco初探</title>
    <link href="www.baidu.com/2018/03/26/Fresco%E5%88%9D%E6%8E%A2/"/>
    <id>www.baidu.com/2018/03/26/Fresco初探/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2019-07-04T12:51:50.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Drawees"><a href="#Drawees" class="headerlink" title="Drawees"></a>Drawees</h2><ol><li><strong>DraweeView</strong>，View层，默认实现类 SimpleDraweeView； </li><li><strong>DraweeHierarchy</strong>，Model层，描述绘制对象数据，持有树状结构的多层Drawable，为了实现UI的可变性，比传统的View嵌套实现更加轻量级，默认实现类GenericDraweeHierarchy；</li><li><strong>DraweeController</strong>，负责处理交互并展现到DrweeView，默认实现类PipelineDraweeController；</li><li><strong>DraweeControllerBuilder</strong> 建造者模式，DraweeController有太多可配置参数；</li></ol><p><strong>Drawees 负责图片的呈现，它由三个元素组成，有点像MVC模式。</strong>Fresco的MVC约束：<br><img src="/images/Fresco-MVC-contract.png" alt=""></p><h2 id="ImagePipeLine"><a href="#ImagePipeLine" class="headerlink" title="ImagePipeLine"></a>ImagePipeLine</h2><ul><li>Bitmap处理方式的抽象，各种缓存策略等等。</li><li>ImagePipeline就是一个加载图片的组件，如果有可能，甚至可以拿出来让其他图片加载框架用。比如Volley的图片加载组件。</li></ul><p><em>ImagePipeLine工作流程</em>：<br><img src="https://www.fresco-cn.org/static/imagepipeline.png" alt=""></p><p><em>ImagePipeLine工作流实现</em>：<br><img src="/images/Fresco-ImagePipeline.png" alt=""></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="/images/Fresco-SequenceChart.png" alt=""></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>官方用法</p><pre><code>Uri uri = Uri.parse(&quot;https://raw.githubusercontent.com/facebook/fresco/gh-pages/static/logo.png&quot;);SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);draweeView.setImageURI(uri);</code></pre><p>其实最后都是一个套路给View一个Controller，想当于View层换了一个Controller</p><pre><code>public void setImageURI(Uri uri, @Nullable Object callerContext) {    DraweeController controller = mSimpleDraweeControllerBuilder        .setCallerContext(callerContext)        .setUri(uri)        .setOldController(getController())        .build();    setController(controller);}    </code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/desmond1121/Fresco-Source-Analysis" target="_blank" rel="noopener">源码解析</a></li><li><a href="https://github.com/liaohuqiu/fresco-demo-for-gradle" target="_blank" rel="noopener">FrescoDemo</a></li><li><a href="https://www.fresco-cn.org/docs/using-drawees-xml.html" target="_blank" rel="noopener">Fresco.cn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;Drawees&quot;&gt;&lt;a href=&quot;#Drawees&quot; class=&quot;headerlink&quot; title=&quot;Drawees&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
</feed>
