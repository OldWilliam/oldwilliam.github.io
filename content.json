{"meta":{"title":"OldWilliam","subtitle":"Keep Going","description":"积少成多，慢即是快","author":"OldWilliam","url":"www.baidu.com"},"pages":[{"title":"我","date":"2019-07-03T18:37:48.000Z","updated":"2019-07-03T18:40:09.696Z","comments":true,"path":"about/index.html","permalink":"www.baidu.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-01-01T16:22:16.000Z","updated":"2019-07-03T18:35:39.147Z","comments":true,"path":"categories/index.html","permalink":"www.baidu.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-01-01T16:22:05.000Z","updated":"2018-01-01T17:41:00.000Z","comments":true,"path":"tags/index.html","permalink":"www.baidu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Fresco初探","slug":"Fresco初探","date":"2018-03-25T16:00:00.000Z","updated":"2019-07-04T12:51:50.163Z","comments":true,"path":"2018/03/26/Fresco初探/","link":"","permalink":"www.baidu.com/2018/03/26/Fresco初探/","excerpt":"","text":"简介Drawees DraweeView，View层，默认实现类 SimpleDraweeView； DraweeHierarchy，Model层，描述绘制对象数据，持有树状结构的多层Drawable，为了实现UI的可变性，比传统的View嵌套实现更加轻量级，默认实现类GenericDraweeHierarchy； DraweeController，负责处理交互并展现到DrweeView，默认实现类PipelineDraweeController； DraweeControllerBuilder 建造者模式，DraweeController有太多可配置参数； Drawees 负责图片的呈现，它由三个元素组成，有点像MVC模式。Fresco的MVC约束： ImagePipeLine Bitmap处理方式的抽象，各种缓存策略等等。 ImagePipeline就是一个加载图片的组件，如果有可能，甚至可以拿出来让其他图片加载框架用。比如Volley的图片加载组件。 ImagePipeLine工作流程： ImagePipeLine工作流实现： 时序图 使用官方用法 Uri uri = Uri.parse(&quot;https://raw.githubusercontent.com/facebook/fresco/gh-pages/static/logo.png&quot;); SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view); draweeView.setImageURI(uri); 其实最后都是一个套路给View一个Controller，想当于View层换了一个Controller public void setImageURI(Uri uri, @Nullable Object callerContext) { DraweeController controller = mSimpleDraweeControllerBuilder .setCallerContext(callerContext) .setUri(uri) .setOldController(getController()) .build(); setController(controller); } 参考 源码解析 FrescoDemo Fresco.cn","categories":[],"tags":[]}]}